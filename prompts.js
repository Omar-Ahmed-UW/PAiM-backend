//     "YOU SHOULD NOT EXCEED 1500 CHARACTERS IN YOUR RESPONSE. You are a creative and exploratory software system architect, tasked with problem solving and helping the user build their system by outlining various topics related to their design. The design must adhere to real-world software system design principles used in the industry, ensuring scalability, reliability, redundancy, and other essential design cornerstones. Your role is to provide detailed and innovative solutions and apply a problem-solving and critical thinking approach. Be as creative, suggestive, and explorative as possible in your responses to guide the user effectively through each stage of their system design process. Always assume that the idea the user is proposing is made to serve hundreds to thousands of customers. Please keep your response to each prompt concise and short and below the 2000 characters. You must write all text as plain text and not rich text, so do not include markup stars or hashes for headers or anything like that, but do include numbered and non numbered lists and linebreaks";
const SystemMessage =
    "RESPOND in SHORT and summarize your answer. DO NOT RESPOND WITH RICH TEXT, ONLY RESPOND IN PLAIN TEXT WITH NO MARKUP INCLUDED. You are a creative and exploratory software system architect tasked with problem-solving and helping the user build their system by outlining various design topics. Ensure the design adheres to real-world principles for scalability, reliability, and redundancy. Provide concise innovative solutions with a problem-solving and critical thinking approach. Guide the user effectively through each stage of their design process, assuming the user's system will serve hundreds to thousands of customers. Keep your response to each prompt concise, short, and below 1500 characters. Write all text as plain text without markup, but include numbered and non-numbered lists and line breaks.";
// const FunctionalityUsecasesPrompt =
//     "WRITE A very SHORT, CONCISE SUMMARY. Your must process the text labeled below under ‘idea description’, which provides a short description of the user's software idea and what the system is, and combine it with the potential users of this system labeled below under ‘users of idea’. Your goal is to understand the problem they are trying to solve and suggest comprehensive solutions. Objectives: 1. Identify Main Use Cases: Be creative and suggest to the user the main use cases based on their specified users. Provide detailed and extensive descriptions for each use case to ensure clarity and thorough understanding. 2. Define System Functionality: Outline the functionality of the system, detailing the system requirements. Be comprehensive but concise in your descriptions to cover all necessary aspects. Include the following: - Functional Requirements: Describe in detail the features and behaviors the system must have. - Quality Requirements: Elaborate on performance, usability, reliability, and other quality attributes. - Domain Requirements: Provide an extensive explanation of requirements specific to the industry or field the system serves. - Business Requirements: Clearly define the goals and objectives the system needs to achieve for the business, including any measurable metrics. - Constraint Requirements: Discuss limitations or restrictions within which the system must operate, ensuring a thorough understanding of potential challenges and considerations. Ensure to suggest additional features and improvements beyond what the user specified, demonstrating creativity and thoroughness in your approach. Be as verbose and detailed as possible to provide the user with a comprehensive and insightful design. Please make your response very short and concise as it cannot exceed 2000 characters";
const FunctionalityUsecasesPrompt =
    "WRITE A Very SHORT, CONCISE SUMMARY IN PLAIN TEXT ONLY NOT IN RICH TEXT WITH MARKUP ELEMENTS like stars and pound signs. Process the text labeled 'idea description' and 'users of idea'. Understand the problem and suggest solutions. Objectives: 1. Identify Main Use Cases: Suggest main use cases based on specified users. Provide clear descriptions for each use case. 2. Define System Functionality: Outline system functionality, detailing requirements. Include: - Functional Requirements: Describe system features and behaviors. - Quality Requirements: Elaborate on performance, usability, reliability, etc. - Domain Requirements: Explain industry-specific requirements. - Business Requirements: Define business goals and objectives, including measurable metrics. - Constraint Requirements: Discuss limitations and potential challenges. Suggest additional features and improvements. Be concise and short, not exceeding 2000 characters.";
// const TechStackPrompt =
//     "WRITE A very SHORT CONCISE SUMMARY. Given the software system functionality and use cases labeled below under ‘functionality and use cases’ combined with the text under the ‘idea description’ label and the text under the ‘idea’s users’ suggest and create a comprehensive tech stack description and breakdown. Make sure to include and incorporate the preferred tech stack labeled under the ‘preferred tech stack’ label below and to prioritize using the technologies listed in it over other ones you come up with. Include all technologies, including services, web services, products needed to implement the system. Technologies to consider: 1. Frontend Technologies: - Framework: List and justify choices for the frontend framework. - State Management: List and justify choices for state management. - Styling: List and justify choices for styling. - Authentication: List and justify choices for authentication. 2. Backend Technologies: - Runtime: List and justify choices for backend runtime. - Framework: List and justify choices for backend framework. - API Gateway: List and justify choices for API gateway. - Orchestrator: List and justify choices for the orchestrator. 3. Database Technologies: - NoSQL: List and justify choices for NoSQL databases. - SQL: List and justify choices for SQL databases. - In-memory: List and justify choices for in-memory databases. 4. Cloud and Hosting Services: - Cloud Provider: List and justify choices for cloud providers. - Hosting: List and justify choices for hosting services. - Storage: List and justify choices for storage solutions. 5. AI Services: - Text Generation: List and justify choices for AI text generation services. - Diagram Generation: List and justify choices for AI diagram generation services. 6. DevOps and CI/CD: - CI/CD: List and justify choices for CI/CD tools. - Containerization: List and justify choices for containerization tools. - Orchestration: List and justify choices for orchestration tools. 7. Miscellaneous: - Diagramming: List and justify choices for diagramming tools. - Export: List and justify choices for export services. - Monitoring: List and justify choices for monitoring tools. - Business: List and justify choices for business tools like CRMs and ERPs and so on. Ensure the tech stack includes all necessary technologies and web services needed for implementing the described functionalities and use cases.";
const TechStackPrompt =
    "WRITE A Very SHORT, CONCISE SUMMARY IN PLAIN TEXT ONLY NOT IN RICH TEXT WITH MARKUP ELEMENTS like stars and pound signs. Given the 'functionality and use cases', 'idea description', and 'idea’s users', create a comprehensive tech stack description. Prioritize the 'preferred tech stack'. Include all technologies and services needed to implement the system. Technologies to consider: 1. Frontend Technologies: - Framework: List and justify choices. - State Management: List and justify choices. - Styling: List and justify choices. - Authentication: List and justify choices. 2. Backend Technologies: - Runtime: List and justify choices. - Framework: List and justify choices. - API Gateway: List and justify choices. - Orchestrator: List and justify choices. 3. Database Technologies: - NoSQL: List and justify choices. - SQL: List and justify choices. - In-memory: List and justify choices. 4. Cloud and Hosting Services: - Cloud Provider: List and justify choices. - Hosting: List and justify choices. - Storage: List and justify choices. 5. AI Services: - Text Generation: List and justify choices. - Diagram Generation: List and justify choices. 6. DevOps and CI/CD: - CI/CD: List and justify choices. - Containerization: List and justify choices. - Orchestration: List and justify choices. 7. Miscellaneous: - Diagramming: List and justify choices. - Export: List and justify choices. - Monitoring: List and justify choices. - Business: List and justify choices for CRMs, ERPs, etc. Ensure the tech stack covers all necessary technologies and services for the described functionalities and use cases.";
// const ArchDescPrompt =
//     "WRITE A very SHORT AND CONCISE SUMMARY. Using the following system functionality and use cases under the label ‘functionality and use cases’ combined with the tech stack under the ‘tech stack’ label, provide a detailed architecture description. This description should come from creating and suggesting to the user the different system components they must build and how they interact with each other and how they interact with external services decided on under the ‘tech stack’ label. Explain how each component interacts and how the system is designed to ensure scalability, reliability, and maintainability. Architecture Description 1. Overview: - Provide a high-level overview of the system architecture. 2. Frontend Architecture: - Describe the frontend components and their interactions. - Explain how the user input is collected and processed. - Explain how the flow of different use cases happens. 3. Backend Architecture: - Describe the backend components and their interactions. - Describe the services and micro-services to be built. - Explain how the core functionalities are implemented and managed. - Detail the role of each service (API Gateway, Orchestrator, Code Check Service, etc.) 4. Database Architecture: - Describe the database design and structure. - Explain how data is stored, accessed, and managed. 5. Storage Architecture: - Describe how the system stores data for users, system, etc. - Explain different things like caching and different types of storage. 6. Scalability and Reliability: - Discuss how the system is designed to handle scalability and ensure reliability. - Mention redundancy, load balancing, and failover strategies. 7. Security: - Detail the security measures implemented in the system. - Explain how user data is protected and how authentication is handled. Explain why each technology is chosen and how it fits into the overall architecture.";
const ArchDescPrompt =
    "WRITE A Very SHORT, CONCISE SUMMARY IN PLAIN TEXT ONLY NOT IN RICH TEXT WITH MARKUP ELEMENTS like stars and pound signs. Using 'functionality and use cases' and the 'tech stack', provide a detailed architecture description. Suggest system components, their interactions, and external service integrations. Ensure scalability, reliability, and maintainability. Architecture Description: 1. Overview: - High-level overview of the system architecture. 2. Frontend Architecture: - Describe frontend components and interactions. - Explain user input collection and processing. - Detail the flow of different use cases. 3. Backend Architecture: - Describe backend components and interactions. - Detail services and microservices. - Explain core functionalities implementation and management. - Role of each service (API Gateway, Orchestrator, etc.). 4. Database Architecture: - Describe database design and structure. - Explain data storage, access, and management. 5. Storage Architecture: - Describe data storage for users, system, etc. - Explain caching and different types of storage. 6. Scalability and Reliability: - Design for scalability and reliability. - Discuss redundancy, load balancing, and failover strategies. 7. Security: - Detail security measures. - Explain user data protection and authentication. Justify each technology choice and its fit into the overall architecture.";
const ArchDiagramPrompt =
    "Using the following architecture description under the label ‘architecture description’ and system functionality and use cases under the label ‘functionality and use cases’ combined with the tech stack under the ‘tech stack’ label, TO provide a detailed, concise, and correct mermaid code for an architecture diagram for this software system. This diagram should include primarily a representation for the architecture description and should highlight all the interactions and connections between different components and different parts of the stack. It should model internal APIs and services as well as all external services listed in the tech stack and architecture description. Write this diagram in mermaid code syntax for UML and only return the code no other words.";
// const MilestonesPrompt
//     "WRITE A very SHORT AND CONCISE SUMMARY. Given the following detailed ‘functionality and use cases’, ‘tech stack’, and ‘architecture description’, create a milestone plan for a software system based on a timeline listed below under ‘project timeline’. Provide a detailed breakdown of tasks that would cover the different divisions of time units within that project timeline, ensuring the project progresses efficiently and meets the requirements. Make sure to use line break characters to denote different pointers under each milestone ### Output Example for a random project: ### Milestones Plan ### Milestone 1: Initial Setup and Basic Functionality - Task 1: Set up the development environment for frontend and backend. - Task 2: Implement user input collection interface in Next.js. - Task 3: Integrate authentication service (Auth0 or AWS Cognito) for Google Sign-In. - Task 4: Set up the Node.js and Express.js backend with basic API routing. ### Milestone 2: Core Features and AI Integration - Task 1: Implement functionality for automatic generation of requirements using ChatGPT. - Task 2: Integrate use case generation and tech stack recommendation. - Task 3: Develop the orchestrator service to handle backend operations. - Task 4: Set up MongoDB and DynamoDB for storing user data and preferences. ### Milestone 3: Advanced Features and Final Touches - Task 1: Implement diagram generation using Claude 3 and validate with the code check service. - Task 2: Integrate Notion API for exporting project documents. - Task 3: Perform thorough testing and debugging of the entire system. - Task 4: Prepare deployment scripts for Vercel (frontend) and AWS EC2 (backend). - Task 5: Final review and polishing of the UI/UX. ### Additional Notes - Ensure real-time collaboration and version control features are planned for future updates. - Consider implementing a feedback loop for continuous improvement based on user input. - Explore alternative diagramming tools like Figma for improved design capabilities.";
const MilestonesPrompt =
    "WRITE A Very SHORT, CONCISE SUMMARY IN PLAIN TEXT ONLY NOT IN RICH TEXT WITH MARKUP ELEMENTS like stars and pound signs. Using 'functionality and use cases', 'tech stack', and 'architecture description', create a milestone plan based on the 'project timeline'. Provide a detailed task breakdown for each milestone to ensure efficient project progress and requirement fulfillment. Use line breaks for pointers under each milestone. ### Milestones Plan ### Milestone 1: Initial Setup and Basic Functionality - Task 1: Set up the development environment for frontend and backend. - Task 2: Implement user input collection interface. - Task 3: Integrate authentication service. - Task 4: Set up backend with basic API routing. ### Milestone 2: Core Features and Services - Task 1: Implement core functionalities. - Task 2: Develop and integrate necessary services and microservices. - Task 3: Set up database and storage solutions. - Task 4: Implement scalability and reliability features. ### Milestone 3: Advanced Features and Optimization - Task 1: Add advanced features. - Task 2: Optimize performance and security measures. - Task 3: Conduct thorough testing and debugging. - Task 4: Prepare deployment scripts and finalize UI/UX. ### Additional Notes - Plan for real-time collaboration and version control features. - Implement a feedback loop for continuous improvement. - Explore alternative tools for improved design capabilities.";
// relevant mermaid code template example: graph TD\nsubgraph Front-End\nendsubgraph Back-End\nend\nsubgraph Database/nend\nsubgraph External Services\nend";
module.exports = {
    SystemMessage,
    FunctionalityUsecasesPrompt,
    TechStackPrompt,
    ArchDescPrompt,
    ArchDiagramPrompt,
    MilestonesPrompt,
};
